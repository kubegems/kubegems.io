"use strict";(self.webpackChunkkubegems_docs=self.webpackChunkkubegems_docs||[]).push([[8695],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=s(n),m=a,d=g["".concat(c,".").concat(m)]||g[m]||p[m]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},15421:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],l={title:"beta.1 to beta.2",hide_title:!0,sidebar_position:1,description:"upgrade v1.22.0-beta.1 to v1.22.0-beta.2"},c=void 0,s={unversionedId:"installation/upgrade/v1.22/beta1-to-beta2",id:"installation/upgrade/v1.22/beta1-to-beta2",title:"beta.1 to beta.2",description:"upgrade v1.22.0-beta.1 to v1.22.0-beta.2",source:"@site/docs/installation/upgrade/v1.22/beta1-to-beta2.mdx",sourceDirName:"installation/upgrade/v1.22",slug:"/installation/upgrade/v1.22/beta1-to-beta2",permalink:"/docs/installation/upgrade/v1.22/beta1-to-beta2",editUrl:"https://github.com/kubegems/kubegems.io/edit/main/docs/installation/upgrade/v1.22/beta1-to-beta2.mdx",tags:[],version:"current",lastUpdatedBy:"LinkMaq",lastUpdatedAt:1666867312,formattedLastUpdatedAt:"2022/10/27",sidebarPosition:1,frontMatter:{title:"beta.1 to beta.2",hide_title:!0,sidebar_position:1,description:"upgrade v1.22.0-beta.1 to v1.22.0-beta.2"},sidebar:"tutorialSidebar",previous:{title:"v1.22.x",permalink:"/docs/category/v122x"},next:{title:"\u5b89\u88c5\u95ee\u9898\u6392\u67e5\u6307\u5357",permalink:"/docs/installation/install-troubleshoot"}},u={},p=[{value:"From v1.22.0-beta.1 to v1.22.0-beta.2",id:"from-v1220-beta1-to-v1220-beta2",level:2},{value:"1. Upgrade kubegems-installer  on all kuberentes cluster",id:"1-upgrade-kubegems-installer--on-all-kuberentes-cluster",level:3},{value:"2. Upgrade kubegems agent on all kubernetes cluster",id:"2-upgrade-kubegems-agent-on-all-kubernetes-cluster",level:3},{value:"3. Upgrade kubegems controller node",id:"3-upgrade-kubegems-controller-node",level:3},{value:"4. Execution script to merge altering revicer",id:"4-execution-script-to-merge-altering-revicer",level:3}],g={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"from-v1220-beta1-to-v1220-beta2"},"From v1.22.0-beta.1 to v1.22.0-beta.2"),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"1-upgrade-kubegems-installer--on-all-kuberentes-cluster"},"1. Upgrade kubegems-installer  on all kuberentes cluster"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'$ kubectl set image deployment/kubegems-installer installer=registry.cn-beijing.aliyuncs.com/kubegems/kubegems:v1.22.0-beta.2 -n kubegems-installer\n$ kubectl patch deployments.apps -n kubegems-installer kubegems-installer -p \'{"spec": {"template": {"spec":{"containers":[{"name":"installer","imagePullPolicy":"Always"}]}}}}\'\n')),(0,o.kt)("h3",{id:"2-upgrade-kubegems-agent-on-all-kubernetes-cluster"},"2. Upgrade kubegems agent on all kubernetes cluster"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'$ Kubectl patch cm/kubegems-global-values  -n kubegems-local --type merge -p \'{"data": {"global.kubegemsVersion": "v1.22.0-beta.2"}}\'\n')),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Changing global values will cause all plugins to be reapplied, and manual changes will be restored."))),(0,o.kt)("h3",{id:"3-upgrade-kubegems-controller-node"},"3. Upgrade kubegems controller node"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'$ kubectl patch plugin/kubegems -n kubegems --type merge -p \'{"spec":{"values":{"global":{"kubegemsVersion": "v1.22.0-beta.2"}}}}\'\n')),(0,o.kt)("h3",{id:"4-execution-script-to-merge-altering-revicer"},"4. Execution script to merge altering revicer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'func mergeLogMonitorReceiver(cli client.Client) {\n    ctx := context.TODO()\n    amConfigs := v1alpha1.AlertmanagerConfigList{}\n    if err := cli.List(ctx, &amConfigs, client.InNamespace(v1.NamespaceAll), client.MatchingLabels(map[string]string{\n        gems.LabelAlertmanagerConfigName: "kubegems-default-logging-alert-rule",\n    })); err != nil {\n        panic(err)\n    }\n\n    for _, v := range amConfigs.Items {\n        monitorAMCfg, err := getOrCreateAlertmanagerConfig(cli, ctx, v.Namespace, prometheus.DefaultAlertCRDName)\n        if err != nil {\n            panic(err)\n        }\n        monRecMap := map[string]v1alpha1.Receiver{}\n        for _, v := range monitorAMCfg.Spec.Receivers {\n            monRecMap[v.Name] = v\n        }\n        for _, logRec := range v.Spec.Receivers {\n            if _, ok := monRecMap[logRec.Name]; !ok {\n                monitorAMCfg.Spec.Receivers = append(monitorAMCfg.Spec.Receivers, logRec)\n            }\n        }\n        monitorAMCfg.Spec.Route.Routes = append(monitorAMCfg.Spec.Route.Routes, v.Spec.Route.Routes...)\n        if err := cli.Update(ctx, monitorAMCfg); err != nil {\n            panic(err)\n        }\n        log.Printf("namespace %s merge finished", v.Namespace)\n        if err := cli.Delete(ctx, v); err != nil {\n            panic(err)\n        }\n    }\n    bts, _ := yaml.Marshal(amConfigs)\n    os.WriteFile(logAmcfgPath, bts, os.ModeAppend)\n}\n\nfunc getOrCreateAlertmanagerConfig(cli client.Client, ctx context.Context, namespace, name string) (*v1alpha1.AlertmanagerConfig, error) {\n    aconfig := &v1alpha1.AlertmanagerConfig{}\n    err := cli.Get(ctx, types.NamespacedName{Namespace: namespace, Name: name}, aconfig)\n    if kerrors.IsNotFound(err) {\n        // \u521d\u59cb\u5316\n        aconfig = prometheus.GetBaseAlertmanagerConfig(namespace, name)\n        if err := cli.Create(ctx, aconfig); err != nil {\n            return nil, err\n        }\n        return aconfig, nil\n    }\n    return aconfig, err\n}\n')))}m.isMDXComponent=!0}}]);