"use strict";(self.webpackChunkkubegems_docs=self.webpackChunkkubegems_docs||[]).push([[3983],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return u}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),d=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=d(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=d(n),u=r,f=m["".concat(c,".").concat(u)]||m[u]||p[u]||i;return n?o.createElement(f,a(a({ref:t},s),{},{components:n})):o.createElement(f,a({ref:t},s))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var d=2;d<i;d++)a[d]=n[d];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},69644:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p}});var o=n(87462),r=n(63366),i=(n(67294),n(3905)),a=["components"],l={title:"Info model",hide_title:!0,sidebar_position:7,description:"informations of model",keywords:["kubegems","modelx"]},c=void 0,d={unversionedId:"ai-applications/modelx/CLI/modelx/info",id:"ai-applications/modelx/CLI/modelx/info",title:"Info model",description:"informations of model",source:"@site/docs/ai-applications/modelx/CLI/modelx/info.mdx",sourceDirName:"ai-applications/modelx/CLI/modelx",slug:"/ai-applications/modelx/CLI/modelx/info",permalink:"/docs/ai-applications/modelx/CLI/modelx/info",editUrl:"https://github.com/kubegems/kubegems.io/edit/main/docs/ai-applications/modelx/CLI/modelx/info.mdx",tags:[],version:"current",lastUpdatedBy:"LinkMaq",lastUpdatedAt:1666867312,formattedLastUpdatedAt:"2022/10/27",sidebarPosition:7,frontMatter:{title:"Info model",hide_title:!0,sidebar_position:7,description:"informations of model",keywords:["kubegems","modelx"]},sidebar:"tutorialSidebar",previous:{title:"Init Model",permalink:"/docs/ai-applications/modelx/CLI/modelx/init"},next:{title:"modelxdl",permalink:"/docs/ai-applications/modelx/CLI/modelxdl"}},s={},p=[{value:"Info model",id:"info-model",level:2}],m={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"info-model"},"Info model"),(0,i.kt)("hr",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ modelx  info modelx/library/stable-diffusion@v1.4-original\n\nconfig:\n  inputs: {}\n  outputs: {}\ndescription: This Stable Diffusion is a latent text-to-image diffusion model capable of generating photo-realistic images given any text input.\nframework: pytorch\nmaintainers:\n- maintainer\nmodelFiles: []\ntags:\n- modelx\ntask: "text-to-image"\n')))}u.isMDXComponent=!0}}]);